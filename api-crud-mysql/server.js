process.on('uncaughtException', (err) => {
    console.error('Erro n√£o tratado:', err);
});
/* Log de erros detalhados: Caso o erro persista, voc√™ pode adicionar um log detalhado para depura√ß√£o.
Isso ajudar√° a identificar erros silenciosos que possam estar ocorrendo.
*/

require('dotenv').config(); // Carregar vari√°veis de ambiente
const express = require('express'); // Importa o Express
/* Essas duas linhas s√£o usadas para configurar e importar as depend√™ncias necess√°rias para o seu servidor
 em Node.js 
Com essas duas linhas, voc√™ prepara seu ambiente para:
1 - Carregar vari√°veis de ambiente de um arquivo .env (√∫til para configura√ß√£o segura).
2 - Iniciar a cria√ß√£o de um servidor com o framework Express.

dotenv: Esse m√≥dulo carrega vari√°veis de ambiente a partir de um arquivo .env para dentro da sua 
aplica√ß√£o. O m√©todo config() l√™ o arquivo .env e adiciona as vari√°veis de ambiente ao process.env. 
Isso permite que voc√™ armazene informa√ß√µes sens√≠veis, como senhas de banco de dados, chaves de API 
e configura√ß√µes de ambiente de forma segura.
Dessa forma, voc√™ pode acessar essas vari√°veis no c√≥digo com process.env.NOME_DA_VARIAVEL .
express: Este comando importa o m√≥dulo Express para a sua aplica√ß√£o. O Express √© um framework web 
para Node.js que facilita a cria√ß√£o de APIs e servidores. Ao importar o Express, voc√™ pode criar rotas, 
configurar middlewares, manipular requisi√ß√µes e respostas, entre outras funcionalidades.
*/

const connection = require('./src/config/database'); // Conex√£o MySQL

const userRoutes = require('./src/routes/userRoutes'); // Importa as rotas de usu√°rio
// Importa as rotas definidas no arquivo 'userRoutes.js' dentro da pasta 'src/routes'

const migrationRoutes = require('./src/routes/migrationRoutes');

const app = express(); // Inicializa o servidor Express
/*Aqui voc√™ est√° criando uma inst√¢ncia do Express, que √© o framework para aplica√ß√µes web em Node.js. 
Isso inicializa o servidor que vai gerenciar as rotas e requisi√ß√µes.
*/

const PORT = process.env.PORT || 3000; // Define a porta
/*A vari√°vel PORT pega a porta do ambiente (se definida) ou usa a porta 3000 como padr√£o. Isso permite 
que voc√™ altere a porta facilmente, dependendo do ambiente onde a aplica√ß√£o est√° sendo executada 
(como desenvolvimento ou produ√ß√£o).
*/

app.use(express.json()); // Middleware para interpretar JSON. Habilita JSON no corpo das requisi√ß√µes
/*Esta linha usa o middleware do Express para interpretar requisi√ß√µes com o corpo em formato JSON. 
Isso √© necess√°rio para trabalhar com APIs que enviam ou recebem dados JSON.
*/

app.use('/api/users', userRoutes); 
// Define que todas as requisi√ß√µes para '/api/users' ser√£o tratadas pelas rotas importadas

app.use('/api/migration', migrationRoutes);

const frutas = ['Ma√ß√£s', 'Bananas', 'Leite']; // Array de strings 
const produtos = [ // Array de Objetos
  { produto: 'TV', valor: 'R$ 3000' },
  { produto: 'Geladeira', valor: 'R$ 2500' }
];
/* Um array, em programa√ß√£o, √© uma estrutura de dados que armazena uma cole√ß√£o ordenada de elementos. Cada elemento possui uma posi√ß√£o num√©rica 
chamada √≠ndice, que come√ßa em 0. 

Declarar os arrays e objetos para teste
const numeros = [1, 2, 3, 4, 5]; // Array de n√∫meros
const misto = [10, "Ol√°", true, null, { nome: "Jo√£o" }]; // Array misto (pouco comum, mas demonstra a flexibilidade)
rota get "/lista" que far√° uma listagem de tarefas adicionada
*/
app.get('/api/frutas', (req, res) => { // Rota GET para listar frutas
  res.json({ frutas });
});

app.get('/api/produtos', (req, res) => { // Rota GET para listar produtos
  res.json({ produtos });
});

// Exibir no console os valores desejados
console.log(frutas[0]); // Sa√≠da: Ma√ß√£s
console.log(frutas[2]); // Sa√≠da: Leite
console.log(produtos[0]); // Sa√≠da: Objeto { produto: "TV", valor: "R$ 3000" }
console.log(produtos[0].produto); // Sa√≠da: TV
console.log(produtos[0].valor); // Sa√≠da: R$ 3000


/* Como testar no Insomnia ou navegador?
Inicie o servidor (se ainda n√£o estiver rodando): digite node server.js
Se estiver usando nodemon: digite npx nodemon server.js

Abra o navegador e acesse os endpoints:

Lista de frutas:
üëâ http://localhost:3000/api/frutas
Resposta esperada (JSON):
{
  "frutas": ["Ma√ß√£s", "Bananas", "Leite"]
}

Lista de produtos:
üëâ http://localhost:3000/api/produtos
Resposta esperada (JSON):
{
  "produtos": [
    { "produto": "TV", "valor": "R$ 3000" },
    { "produto": "Geladeira", "valor": "R$ 2500" }
  ]
}
*/

app.get('/', (req, res) => {
  res.json({ message: 'Ol√° Mundo!' });
  });
/* Rota b√°sica
Aqui voc√™ est√° criando uma rota GET na raiz (/). Quando a rota √© acessada, a resposta ser√° um objeto 
JSON com a chave message e o valor "Ol√° Mundo!". O c√≥digo de status HTTP 200 indica que a requisi√ß√£o 
foi bem-sucedida.
app.get("/", function(req,res) {
    res.status(200).json({message:"Ol√° Mundo!"});
});
Teste no navegador ou Insomnia
URL: http://localhost:3000/
*/

app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});
/* Inicia o servidor
Essa linha faz o servidor "escutar" a porta definida na vari√°vel PORT. Quando o servidor estiver rodando, 
ele exibir√° no console a mensagem indicando que est√° ativo e rodando na URL configurada 
(http://localhost:3000 ou outra porta, dependendo do ambiente).
*/


        
