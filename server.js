// server.js (Inicia o servidor sem abrir conexÃµes)
// Agora o servidor inicia sem conectar ao banco.

const express = require("express");
/*
Importa o framework Express, que facilita a criaÃ§Ã£o de servidores web e APIs no Node.js.
require("express") carrega o mÃ³dulo do Express, permitindo que ele seja usado no cÃ³digo.
*/

const app = express();
/*
Cria uma instÃ¢ncia do Express chamada app.
app representa o servidor da aplicaÃ§Ã£o e Ã© usado para definir rotas, middlewares e configuraÃ§Ãµes.
*/

const migrationRoutes = require("./src/routes/migrationRoutes");
/*
Importa o arquivo migrationRoutes.js, que contÃ©m as rotas responsÃ¡veis por lidar com a migraÃ§Ã£o de dados.
require("./src/routes/migrationRoutes") carrega esse mÃ³dulo para ser usado no servidor.
*/

app.use(express.json());
/*
Adiciona um middleware que permite o servidor interpretar requisiÃ§Ãµes com JSON no corpo.
Sem isso, o Express nÃ£o conseguiria processar req.body em requisiÃ§Ãµes do tipo POST ou PUT enviadas como JSON.
*/

app.use("/api", migrationRoutes);
/*
Define um prefixo "/api" para todas as rotas importadas de migrationRoutes.js.
Se migrationRoutes tiver uma rota /migrate, ela serÃ¡ acessÃ­vel via /api/migrate.
*/

const PORT = process.env.PORT || 3000;
/*
Define a porta onde o servidor vai rodar.
Se existir a variÃ¡vel de ambiente PORT, ele usa esse valor; caso contrÃ¡rio, usa a porta padrÃ£o 3000.
*/

app.listen(PORT, () => {
  console.log(`ğŸš€ Servidor rodando em http://localhost:${PORT}`);
});
/*
Inicia o servidor Express e faz com que ele escute conexÃµes na porta definida.
Quando o servidor comeÃ§a a rodar, ele exibe a mensagem "ğŸš€ Servidor rodando em http://localhost:PORT" no terminal.
*/

/*
Resumo do fluxo do cÃ³digo:
Esse cÃ³digo cria um servidor Express que:
Aceita requisiÃ§Ãµes JSON.
Define um prefixo /api para as rotas.
Importa as rotas de migraÃ§Ã£o.
Escuta conexÃµes na porta 3000 (ou outra definida no ambiente).
*/